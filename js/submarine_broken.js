/*  * Exo Aquatic Game  * Copyright (c) 2014 Luke Nickerson, aka. Deathray Games  */var ExoAquaticGameClass = function (dataDeliveryObj) {	this.version = "0.000";	this.hasGameStarted = false;	this.dataDelivery = dataDeliveryObj;	// Canvas Variables	this.canvasElt 	= document.getElementById('canvas');	this.ctx 		= this.canvasElt.getContext('2d');	this.canvasDim 		= { "x" : 320, "y" : 320 };		this.canvasScale 			= 1.0;				//==============(((((((((((((((( OOOOoooo Loop ooooOOOO ))))))))))))))))===	this.isLooping 		= false;	this.loopTimer 		= 0;	this.loopIteration 	= 0;	this.lastTime 		= 0;	//==== Loop timing Constants	this.loopDelay		= 14;	// ^ Decrease for more fps	// 1000 = 1 second	// 100 = 1/10th of a second	// 16 = 1/?th of a second = 62.5 fps (closest to 60 fps)	// 10 = 1/100th of a second (better than 60 fps)	// Needs to be less than 16 to accomodate for the time it takes to run the loop 'stuff'	this.framesPerSecond = (1000 / this.loopDelay);	this.secondsPerLoop	= (this.loopDelay / 1000);	// Update certain things once every X iterations	this.loopModulus		= Math.round(this.framesPerSecond); // once per second	this.loopModulusAction	= Math.round(this.framesPerSecond / 2); // twice per second		this.loop = function () 	{			if (o.isLooping) {			o.loopIteration++;			if (o.loopIteration < 15000000) {				o.loopTimer = window.setTimeout(function(){					o.loop();				}, o.loopDelay); 			} else {				o.loopIteration = 0;				o.togglePause(true);			}		}		}			this.togglePause = function (forcePause) {		if (typeof forcePause === 'boolean') {			if (this.isLooping == !forcePause) return false;			this.isLooping = !forcePause;		} else {			this.isLooping = !this.isLooping;		}		if (this.isLooping) this.loop();		console.log("Game " + ((this.isLooping) ? "un" : "") + "paused.");	}//===MMMMMMMMMMMMMMMMMMMM=== Menus ============================================	this.openMenu = function (menuName) {		var o = this;		console.log(menuName);		//o.togglePause(true);		$('.menu').filter(":visible").hide(200, function(){			console.log("Fade in", menuName);			$('#' + menuName + 'Menu').fadeIn(100);		});	}//=======SSSSSSS=========== SETUP ===============SSSSSSSSSSSSSSSSSSSSSS====	this.setup = function()	{		var o = this;		this.dataDelivery.deliver("data/game_data.json", function(refData){			// Continue with setup after data is loaded...			o.loadImages(refData.images);			o.setupCanvas();			o.setupEvents();						//o.zones = refData.zones;			//o.availableRaces = refData.availableRaces;			//o.unavailableRaces = refData.unavailableRaces;			//o.allLikes = refData.allLikes;						//console.log("Load zone");			//o.loadZone("SOUTH");						// Find DOM elements			//o.magickaElt = document.getElementById('magicka');			//o.staminaElt = document.getElementById('stamina');			//o.healthElt	= document.getElementById('health');					//o.targetHealthElt	= $('#target .health')[0];			//o.$interface	= $('#interface');						o.whenImagesLoaded(0, function(){				//o.launchGame(true);				o.openMenu("begin");			});			console.log("I am obviously on line 106.");					});	}		this.loadImages = function (imagesRefObj) 	{		this.imagesCount = 0;		this.imagesLoadedCount = 0;		var o = this;		/*		for (v in imagesRefObj) {			o.imagesCount++;			o.images[v] = new Image();			o.images[v].src = 'images/' + imagesRefObj[v];			o.images[v].onload = function () {				o.imagesLoadedCount++;			}		}		*/		console.log("Loading " + o.imagesCount + " images. (" + o.imagesLoadedCount + " done so far.)");				// *** Do some loop to wait for images to load		}		this.whenImagesLoaded = function (loadCounter, callback)	{		if (this.imagesLoadedCount == this.imagesCount) {			console.log("All " + this.imagesCount + " images loaded.");			callback();			//return true;		} else if (loadCounter > 100) {			console.error("Could not load images.");			alert("ERROR - Could not load images.");		} else {			var o = this;			loadCounter++;			window.setTimeout(function(){				o.whenImagesLoaded(loadCounter, callback);			}, 200);			//return false;		}	}	this.setupCanvas = function () {		this.canvasElt.setAttribute('width', this.canvasDim.x * this.canvasScale);		this.canvasElt.setAttribute('height', this.canvasDim.y * this.canvasScale);		this.ctx.imageSmoothingEnabled = false; // http://stackoverflow.com/questions/18547042/resizing-a-canvas-image-without-blurring-it		this.ctx.save();		this.ctx.scale(this.canvasScale,this.canvasScale);	}	this.setupEvents = function() {		var o = this;		$('.openMenu').click(function(e){			o.openMenu( $(this).data("menu") );			e.preventDefault();		});	}		//========================================= Helper Functions	this.roll1d = function (sides) {		return (Math.floor(Math.random()*sides) + 1);	}		this.cloneDataObject = function (o) {		return JSON.parse(JSON.stringify(o));	}	//=///======================================== Construction ==\\\\\========	this.construction = function () {				if (!window.localStorage) {			alert("This browser does not support localStorage, so this app will not run properly. Please try another browser, such as the most current version of Google Chrome.");		}		if (!window.jQuery) { alert("ERROR - jQuery is not loaded!"); }	}	this.construction();}console.log("Bottom of submarine.js");